#version 450 core
layout(triangles, equal_spacing, ccw) in;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;
vec4 interpolate4D(vec4 v0, vec4 v1, vec4 v2) ;

uniform mat4 view;
uniform mat4 projection;
uniform sampler2D heightMap;
uniform int scale;

uniform vec3 camPos;
const float density = 0.0035;
const float  gradient = 3;
//uniform float octaves;
uniform vec3 sky;

in vec3 posTC[] ;
in vec2 textTC[] ;
in vec4 FragPosLightSpaceTC[] ;

out vec3 normES ;
out vec2 textES;
out vec3 posES ;
out float visibility;
out vec4 FragPosLightSpaceES ;

void main()
{
   textES = interpolate2D(textTC[0], textTC[1],textTC[2]) ;
   posES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   FragPosLightSpaceES = interpolate4D(FragPosLightSpaceTC[0], FragPosLightSpaceTC[1], FragPosLightSpaceTC[2]) ;


   float height = texture(heightMap, textES).r;
   posES.y = height * scale;
   
   float right = (textureOffset(heightMap, textES, ivec2(1, 0)).r)* scale;
   float left = (textureOffset(heightMap, textES, ivec2(-1, 0)).r)* scale;
   float up = (textureOffset(heightMap, textES, ivec2(0, 1)).r)* scale;
   float down = (textureOffset(heightMap, textES, ivec2(0, -1)).r)* scale;
      
   float lr = left - right;
   float du = up - down;
   normES = normalize(vec3(lr,1.0,du));
   posES.y = height*100;
   gl_Position = projection * view  *vec4(posES, 1.0); 	 

   float distanceFromCam = distance(camPos, posES);
   visibility = exp(-pow((distanceFromCam * density),gradient));
   visibility = clamp(visibility,0.0,1.0);    
   
} 

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec4 interpolate4D(vec4 v0, vec4 v1, vec4 v2)
{
   	return vec4(gl_TessCoord.x) * v0 + vec4(gl_TessCoord.y) * v1 + vec4(gl_TessCoord.z) * v2;
}

//float hash(float n)
//{
//	return fract (sin(n) * 753.5453123);
//}

//float snoise(vec3 x)
//{
//	vec3 p = floor(x);
//	vec3 f = fract(x);
//	f= f * f * (3.0f - (2.0f * f));
//
//	float n = p.x + p.y * 157.0f + 113.0f * p.z;
//	return mix(mix(mix(hash(n + 0.0f), hash(n + 1.0f),f.x),
//				  mix(hash(n + 157.0f), hash(n + 158.0f),f.x), f.y),
//				  mix(mix(hash(n + 113.0f), hash(n + 114.0f), f.x),
//				  mix(hash(n + 270.0f), hash(n + 271.0f), f.x), f.y), f.z);
//}
//
//float noise(vec3 position, int octaves)
//{
//	float total = 0.0f;
//	float maxAmp = 0.0f;
//	float amp = 50.0f;
//	float frequency = 0.005f;
//
//	for (int i=0; i < octaves; i++)
//	{		
//		total += snoise(position * frequency) * amp;		
//		frequency *= 2.0f;
//		amp /= 2.0f;
//		maxAmp += amp;
//	}
//	return (total / maxAmp) *scale;
//}